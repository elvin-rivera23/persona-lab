name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install pytest ruff black

      - name: Ruff (lint)
        run: ruff check .

      - name: Black (format check)
        run: black --check .

      - name: Run pytest
        run: pytest -q --disable-warnings -x

  compose-smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [unit-tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compose up (build + start api/worker)
        run: |
          docker compose up -d --build
          docker compose ps

      - name: Wait for API readiness (/ready)
        run: |
          for i in {1..40}; do
            if curl -fsS http://localhost:8001/ready >/dev/null 2>&1; then
              echo "API ready ✅"; exit 0
            fi
            sleep 1
          done
          echo "API failed to become ready ❌"
          echo "----- api logs -----"
          docker compose logs --no-color api || true
          exit 1

      - name: Probe /metrics (sanity)
        run: |
          curl -fsS http://localhost:8001/metrics | head -n 40

      - name: Check Worker health
        run: |
          curl -fsS http://localhost:8022/health >/dev/null
          echo "Worker healthy ✅"

      - name: Teardown
        if: always()
        run: docker compose down --remove-orphans -v
